/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_mini_ls.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: sishige <sishige@student.42tokyo.j>        +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/08/01 18:45:21 by sishige           #+#    #+#             */
/*   Updated: 2024/08/04 00:57:37 by sishige          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "ft_mini_ls.h"

#include <stdio.h>
#include <libc.h>

__attribute__((destructor)) static void destructor(void)
{
	system("leaks -q ft_mini_ls");
}

int	compare_dir_update_time(const void *a, const void *b)
{
	time_t a_update_time;
	time_t b_update_time;

	a_update_time = ((t_ent_stat *)a)->stat.st_mtimespec.tv_sec;
	b_update_time = ((t_ent_stat *)b)->stat.st_mtimespec.tv_sec;
	if (a_update_time < b_update_time)
		return (1);
	if (b_update_time < a_update_time)
		return (-1);
	return (0);
}

static int	get_status(stat *status, dirent *entry) 
{
	int is_error;

	if (entry->d_type != DT_LNK)
		is_error = lstat(entry->d_name, status);
	else
		is_error = stat(entry->d_name, status);
	return (is_error);
}

int	*get_entry_status(t_ent_stat **ent_stat_p, size_t *size_ent_stat, DIR *dp, char *path)
{
	size_t		num_ent_stat

	if (!ent_stat_p || !dp)
		return (-1);
	num_ent_stat = 0;
	while (true)
	{
		if (size_ent_stat <= num_ent_stat)
		{
			ent_stat_p = ft_realloc(ent_stat_p, sizeof(t_ent_stat) * size_ent_stat * 2 ,sizeof(t_ent_stat) * size_ent_stat);
			if (!ent_stat_p)
				return (free(ent_stat_p) -1);
			size_ent_stat *= 2;
		}
		ent_stat_p[num_ent_stat].ent = readdir(dp);
		if (!ent_stat_p[num_ent_stat].ent)
			break ;
		if (get_status(&ent_stat_p[num_ent_stat].stat, ent_stat_p[num_ent_stat].ent) == -1)
			return (free(ent_stat_p), closedir(dp), -1);
		num_ent_stat++;
	}
	return (closedir(path), num_ent_stat);
}

static int	do_ls(char *path)
{
	DIR			*dp;
	t_ent_stat	*ent_stat_p;
	size_t		size_ent_stat;
	size_t		num_ent_stat
	int			is_error;

	dp = opendir(path);
	if (!dp)
		return (-1);
	size_ent_stat = 16;
	ent_stat_p = (t_ent_stat *)calloc(size_ent_stat, sizeof(t_ent_stat));
	if (!ent_stat_p)
		return (closedir(dp), -1);
	size_t	i = 0;
	while (true)
	{
		if (i >= size_ent_stat)
		{
			size_ent_stat *= 2;
			t_ent_stat *tmp = realloc(ent_stat_p, size_ent_stat * sizeof(t_ent_stat));
			if (!tmp)
				return (free(ent_stat_p), closedir(dp), -1);
			ent_stat_p = tmp;
		}
		ent_stat_p[i].ent = readdir(dp);
		if (!ent_stat_p[i].ent)
			break ;
		if (ent_stat_p[i].ent->d_type == DT_LNK)
			is_error = lstat(ent_stat_p[i].ent->d_name, &ent_stat_p[i].stat);
		else
			is_error = stat(ent_stat_p[i].ent->d_name, &ent_stat_p[i].stat);
		if (is_error == -1)
			return (free(ent_stat_p), closedir(dp), -1);
		i++;
	}
	size_t num_files = i;
	ft_qsort(ent_stat_p, num_files, sizeof(t_ent_stat), &compare_dir_update_time);
	for (i = 0; i < num_files; i++)
	{
		if (ent_stat_p[i].ent->d_name[0] != '.')
			printf("%s\t\t%zd\n", ent_stat_p[i].ent->d_name, ent_stat_p[i].stat.st_mtimespec.tv_sec);
	}
	return (free(ent_stat_p), closedir(dp), 0);
}

int	main(int argc, char *argv[])
{
	if (argc < 2)
		return (fprintf(stderr, "%s: no arguments\n", argv[0]), -1);
	do_ls(argv[1]);
	return (0);
}
